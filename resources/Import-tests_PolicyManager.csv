project,type,summary,description,components,fixVersions,labels,testRepositoryPath,priority
VLBSFI_GDP_AG,Test,Create a policy set via API,"Description\Verify that the GDP Policy Manager allows the user to create a new policy set.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1801] - CREATE A POLICY SET VIA API\ \Preconditions\Logged-in user must have permissions to access application.\The policy set must be created for an eligible application \ \Procedure\1. Execute a POST request to the Policy Manager's API, path /policy-sets.\2. Execute a GET request to Policy Manager´s API´s, path /policy-sets.\ \Expected Result\1. Verify that a success message is returned along with a 201 HTTP code.\2. A list with all existing policy sets is returned in JSON format. The list contains the newly created policy set. A 200 HTTP code is also returned.\ \Notes\1. Policy set is identified uniquely by Application name and name space.\2. Body used on step 1:\
{""namespace"": ""<namespace>"", (*)""applicationName"": ""<application>"", (*)""policySetDescription"": ""<description>"",    ""policies"": [{""namespace"": ""<namespace>""(*),""applicationName"": ""<application>""(*),""policyName"": ""<policy_name>""(*),""policyDescription"": ""<description>"",""aclId"": ""<acl_id>"", ""conditions"": [{""effect"": ""<PERMIT | DENY>"",""expression"": ""<expression>""}],""policyTarget"": [{""key"": ""<sub | obj | act>"",""value"": ""<value>""}...{""key"": ""act"",""value"": ""java.lang.String""}],""policyCombiningAlgorithm"": ""<algorithm>""}]""policyTarget"": {},""combiningAlgorithm"": ""<algorithm>""}",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend,cyber",/Policy Manager/Cyber Security,Critical
VLBSFI_GDP_AG,Test,Cannot create a policy set for an existing namespace/application combination via API,"Description\Verify that different policy sets must have different namespace-application combinations.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1802] - CANNOT CREATE A POLICY SET FOR AN EXISTING NAMESPACE/APPLICATION COMBINATION VIA API\ \Preconditions\Logged-in user must have permissions to access application.\At least one policy set must be created. \ \Procedure\GIVEN The Policy Manager eligible applications\AND The eligible application ""GDP"" ""Alarm Manager SP""\ AND A policy set for namespace ""GDP"" and application ""Alarm Manager SP"" created\WHEN A POST request to ""/policy-sets""  is made (namespace ""GDP"" and application ""Alarm Manager SP"")\ \Expected Result\THEN A 409 HTTP code is returned\ \Notes\1. Body used on POST request:\{""namespace"":""GDP"", ""applicationName"": ""Alarm Manager SP"", ""policySetDescription"": null, ""policies"": [], ""policyTarget"":{}, ""combiningAlgorithm"": ""PERMIT_OVERRIDES""}",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend,cyber",/Policy Manager/Cyber Security,High
VLBSFI_GDP_AG,Test,Policy set cannot be created without namespace via API,"Description\Verify that the user cannot create policy sets without namespace\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1803] - POLICY SET CANNOT BE CREATED WITHOUT NAMESPACE VIA API\ \Preconditions\\ \Procedure\GIVEN The Policy Manager eligible applications\ AND The eligible appication ""Alarm Manager SP""\ AND No policy-sets created\ AND The Policy Manager test data ""Policy Set without a namespace""\WHEN A POST request to ""/policy-sets""  is made\ \Expected Result\THEN A 400 HTTP code is returned\ \Notes\Test Data:""Policy Set without a namespace""\ {""applicationName"":""Alarm Manager SP"",""policies"":[],""combiningAlgorithm"": ""PERMIT_OVERRIDES""}",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend,cyber",/Policy Manager/Cyber Security,High
VLBSFI_GDP_AG,Test,Policy Set cannot be created without application name via API,"Description\Verify that the user cannot create policy sets without application name\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1804] - POLICY SET CANNOT BE CREATED WITHOUT APPLICATION NAME VIA API\ \Preconditions\\ \Procedure\GIVEN The Policy Manager eligible applications\AND The eligible application """"GDP"" ""Alarm Manager SP""\AND No policy-sets created\AND The Policy Manager test data ""Policy Set without an application name""\WHEN A POST request to ""/policy-sets""  is made\ \Expected Result\THEN A 400 HTTP code is returned\ \Notes\Test Data: ""Policy Set without an application name""\{""namespace"":""GDP"",""policies"":[],""combiningAlgorithm"": ""PERMIT_OVERRIDES""}",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend,cyber",/Policy Manager/Cyber Security,High
VLBSFI_GDP_AG,Test,Cannot modify a policy set's name to an existing name via API,"Description\Verify that the user cannot modify the policy set namespace/applicationName combination to an existing combination. \ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1805] - CANNOT MODIFY A POLICY SET'S NAME TO AN EXISTING NAME VIA API\ \Preconditions\Logged-in user must have permissions to access application.\At least one policy set must be created.\ \Procedure\1. Execute a PUT request to the Policy Manager's API, path /policy-sets/{namespace}/{applicationName}.\2. Execute a GET request to the Policy Manager's API, path /policy-sets/{namespace}/{applicationName}.\ \Expected Result\1. Verify that a success message is returned along with a 404 HTTP code.\2. A list with all existing policy sets is returned in JSON format. The policy set from step 1 was not updated. A 200 HTTP code is also returned.\ \Notes\Test Data:\ {""namespace"":""GDP"", ""applicationName"":<existing_app>, ""policies"":[],""combiningAlgorithm"": ""PERMIT_OVERRIDES""}",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend,cyber",/Policy Manager/Cyber Security,High
VLBSFI_GDP_AG,Test,Add policies to a policy set via API,"Description\Verify that the Policy Manager allows the user to add policies to a policy set.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1806]ADD POLICIES TO A POLICY SET VIA API\ \Preconditions\Logged-in user must have permissions to access application.\At least one policy set must be created. \ \Procedure\1. Execute a PUT request to the Policy Manager's API, path /policy-sets/{namespace}/{applicationName}.\2. Execute a GET request to the Policy Manager's API, path /policy-sets.\ \Expected Result\1. Verify that a success message is returned along with a 202 HTTP code.\2. A list with all existing policy sets is returned in JSON format. The list contains the updated policy set with the new policies. A 200 HTTP code is also returned.\ \Notes\1. Policy set is identified uniquely by Application name and name space.\2.  Body used on step 1: {""namespace"": ""<namespace>"", (*)""applicationName"": ""<application>"", (*)""policySetDescription"": ""<description>"",  ""policies"": [{""namespace"": ""<namespace>""(*),""applicationName"": ""<application>""(*),""policyName"": ""<policy_name>""(*),""policyDescription"": ""<description>"",""aclId"": ""<acl_id>"", ""conditions"": [{""effect"": ""<PERMIT | DENY>"",""expression"": ""<expression>""}],""policyTarget"": [{""key"": ""<sub | obj | act>"",""value"": ""<value>""}...{""key"": ""act"",""value"": ""java.lang.String""}],""policyCombiningAlgorithm"": ""<algorithm>""}]""policyTarget"": {},""combiningAlgorithm"": ""<algorithm>""}",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,Critical
VLBSFI_GDP_AG,Test,Remove policies from a policy set via API,"Description\Verify that the Policy Manager allows the user to remove polices from a policy set. \ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1807] - REMOVE POLICIES FROM A POLICY SET VIA API\ \Preconditions\Logged-in user must have permissions to access application.\At least one policy set must be created with policies. \ \Procedure\1. Execute a PUT request to the Policy Manager's API, path /policy-sets/{namespace}/{applicationName}.\2. Execute a GET request to the Policy Manager's API, path /policy-sets.\ \Expected Result\1. Verify that a success message is returned along with a 202 HTTP code.\2. A list with all existing policy sets is returned in JSON format. The policy set from step 1 doesn't contain the removed policies. A 200 HTTP code is also returned.\ \Notes\1.Policy set is identified uniquely by Application name and name space.\2. Body used on step 1: {""namespace"": ""<namespace>"", (*)""applicationName"": ""<application>"", (*)""policySetDescription"": ""<description>"",    ""policies"": [], ""policyTarget"": {},""combiningAlgorithm"": ""<algorithm>""}",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,Critical
VLBSFI_GDP_AG,Test,Different policy sets can have policies with the same name via API,"Description\Verify that the different policy sets can have policies with the same name.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1808] - DIFFERENT POLICY SETS CAN HAVE POLICIES WITH THE SAME NAME VIA API\ \Preconditions\Logged-in user must have permissions to access application.\ \Procedure\1. Execute a POST request to the Policy Manager's API, path /policy-sets.\2. Execute a POST request to the Policy Manager's API, path /policy-sets creating a policySet with the same policy names used in step 1.\3. Execute a GET request to the Policy Manager's API, path /policy-sets.\ \Expected Result\1. Verify that a success message is returned along with a 201 HTTP code.\2. Verify that a success message is returned along with a 201 HTTP code.\3. A list with all existing policy sets is returned in JSON format. The list contains different policy sets with the same policies.\ \Notes\1. Policy set is identified uniquely by Application name and name space.\2.  Body used on step 1 and 2: {""namespace"": ""name space"",""applicationName"": ""application Name"",""policies"": [{ ""namespace"": ""name space"",""applicationName"": ""application Name"", ""policyName"":""namespace""}]",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,High
VLBSFI_GDP_AG,Test,Delete a policy set via API,"Description\Verify that the Policy Manager allows the user to delete a policy set.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1809] - DELETE A POLICY SET VIA API\ \Preconditions\Logged-in user must have permissions to access application.\At least one policy set must be created. \ \Procedure\1. Execute a DELETE request to the Policy Manager's API, path /policy-sets/{namespace}/{applicationName}.\ 2. Execute a GET request to the Policy Manager's API, path /policy-sets.\ \Expected Result\1. Verify that a success message is returned along with a 204 HTTP code.\2. A list with all existing policy sets is returned in JSON format. The list does not contain the deleted policy set. A 200 HTTP code is also returned.\ \Notes\1. Policy set is identified uniquely by Application name and name space.",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,Critical
VLBSFI_GDP_AG,Test,Import an access control list via API,"Description\Verify that the Policy Manager allows the user to create an Access Control Lists from a csv file.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1810] - IMPORT AN ACCESS CONTROL LIST VIA API\ \Preconditions\Logged-in user must have permissions to access application.\ \Procedure\1. Execute a POST request to the Policy Manager's API, path /access-control-lists/import - acl from valid csv file\ 2. Execute a GET request to the Policy Manager's API, path /access-control-lists/<aclId>/entries - after creating an acl\3. Verify that the Access Control List is according to the csv file\ \Expected Result\1. A 201 HTTP code is returned. The aclId and total number of created fieldNames and entires is returned. - acl successfully created\2. A 200 HTTP code is returned. A list with all existing Access Control Lists is returned in a JSON format. The list contains the newly created Access Control List.\ 3. The fieldNames and aclEntries are set according to the csv file\ \Notes\1. Include a body with the required JSON data. Body used in step 1: form-data (key/value)\BODY 1:\acls/<file.csv> (*)\name/<acl_name> (*)\description/<description>\ \BODY 2:\ acls/<file.csv> (file size 2MB with 16 columns)(*)\name/<acl_name> (*)\description/<description>\ \BODY 3:\acls/<file.csv> (file with columns and no entries)(*)\name/<acl_name> (*)\description/<description>\(*) mandatory",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,Critical
VLBSFI_GDP_AG,Test,Modify an access control list via API,"Description\Verify that the Policy Manager allows the user to modify an Access Control List.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1811] - MODIFY AN ACCESS CONTROL LIST VIA API\ \Preconditions\Logged-in user must have permissions to access application.\At least one access control list must be created. \ \Procedure\1. Execute a POST request to the Policy Manager's API, path /acess-control-lists/import - update success\2. Execute a GET request to the Policy Manager's API, path /acess-control-lists - after a successful update\3. Verify that the Access Control List is according to the csv file\ \Expected Result\1. A 201 HTTP code is returned. The total number of created fieldNames and entires is returned. - update success\2. A 200 HTTP code is returned. A list with all existing Access Control List is returned in JSON format. The list contains the updated Access Control List.\ 3. The fieldNames and aclEntries are set according to the csv file.\ \Notes\1. Include a body with the required JSON data. Body used in step 1: form-data (key/value)\acls/<file.csv> (*)\name/<acl_name> (*)\aclId/<aclID>(**)\description/<description>\(*) mandatory\(**) ACL ID of ACL to be updated.",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,Critical
VLBSFI_GDP_AG,Test,Delete an access control list via API,"Description\Verify that the Policy Manager allows the user to delete an Access Control List.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1812] - DELETE AN ACCESS CONTROL LIST VIA API\ \Preconditions\Logged-in user must have permissions to access application.\At least one access control list must be created. \ \Procedure\1. Execute a DELETE request to the Policy Manager's API, path /access-control-lists/{aclID}.\2. Execute a GET request to the Policy Manager's API, path /access-control-lists.\ \Expected Result\1. Verify that a message is returned along with a  205 HTTP. - acl deleted\2. A 200 code is returned. A list with all existing Access Control Lists is returned in JSON format. The list does not contain the deleted Access Control List.\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,Critical
VLBSFI_GDP_AG,Test,Policy Manager application logs - call made to API methods,"Description\Verify that the Policy Manager produces the required application logs for calls made to APIs methods.\ \IVV Techniques\Functional/Black-box testing\Traceability\ \STD Reference\[GDP-STD-1813] - POLICY MANAGER APPLICATION LOGS - CALL MADE TO API METHODS\ \Preconditions\Logged-in user must have permissions to access application.\The following actions must be executed:POST, PUT, DELETE, GET\ \Procedure\1. Navigate to the GDP Application Logs Manager.\2. On the main panel, search for a logs for all calls made to APIs methods.\ \Expected Result\1. GDP App Logs Manager is loaded successfully and the logs list is shown.\2. There is an application log for each call made by each API method.\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,frontend,safety",/Policy Manager/Safety,High
VLBSFI_GDP_AG,Test,Policy Manager application logs - response from calls made to APIs methods,"Description\Verify that the Policy Manager produces the required application logs for all responses from calls made to APIs methods API.\ \IVV Techniques\Functional/Black-box testing\Traceability\ \STD Reference\[GDP-STD-1814] - POLICY MANAGER APPLICATION LOGS - RESPONSE FROM CALLS MADE TO APIs METHODS\ \Preconditions\Logged-in user must have permissions to access application.\ \Procedure\1. Navigate to the GDP Application Logs Manager.\2. On the main panel, search for a logs for all responses from calls made to APIs methods API.\ \Expected Result\1. GDP App Logs Manager is loaded successfully and the logs list is shown.\2. There is an application log for each response from call made by each API method.\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,frontend,safety",/Policy Manager/Safety,High
VLBSFI_GDP_AG,Test,"For different spaces, policiy sets can have the same application name","Description\Verify for different spaces, policy sets can have the same application name.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1815] - FOR DIFFERENT SPACES, POLICIY SETS CAN HAVE THE SAME APPLICATION NAME\ \Preconditions\Logged-in user must have permissions to access application.\At least one policy set must be created.\ \Procedure\1. Execute a POST request to the Policy Manager's API, path /policy-sets - with different space and existing app name\2. Execute a GET request to the Policy Manager's API, path /policy-sets - after post with different space and existing app nam\ \Expected Result\1. Verify that is returned along with a 201 HTTP code.\2. A 200 HTTP code together with a list with all existing policy sets in JSON format. The list contains the two policy sets with different spaces and equal application names.\ \Notes\\1. Policy set is identified uniquely by Application name and name space.\ \ 2. Include a body with the required JSON data, ensuring that the application name exist on another space. Body used on step 2:{""namespace"": ""<namespace>"",""applicationName"": ""<applicationName>"",""policies"": []}.",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend,cyber",/Policy Manager/Cyber Security,High
VLBSFI_GDP_AG,Test,"For the same space and application, different polices must have different names via API","Description\Verify for the same space and application name, different policies must have different name.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1816] - FOR THE SAME SPACE AND APPLICATION, DIFFERENT POLICES MUST HAVE DIFFERENT NAMES VIA API\ \Preconditions\Logged-in user must have permissions to access application.\At least one policy  must be created. \ \Procedure\1. Execute a POST request to the Policy Manager's API, path /policy-sets - with an existing policy name\2. Execute a GET request to the Policy Manager's API, path /policy-sets - after post with an existing policy name\ \Expected Result\1. Verify that a error message is returned along with a 409 HTTP code - with an existing policy name\2. A 200 HTTP code is returned together with a list with all existing policies is returned in a JSON format. The policy from step 1 is not repeated.\ \Notes\1. Create a policy-set with two policies. The policies must have the same name\2. Policy is identified uniquely by Application name and name space and ID policy.",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend,cyber",/Policy Manager/Cyber Security,High
VLBSFI_GDP_AG,Test,"For the same space, different applications can have polices with the same name via API","Description\Verify for the same space, different applications can have policies with the same name.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1817] - FOR THE SAME SPACE, DIFFERENT APPLICATIONS CAN HAVE POLICES WITH THE SAME NAME VIA API\ \Preconditions\Logged-in user must have permissions to access application.\At least one policy  must be created. \ \Procedure\1. Execute a POST request to the Policy Manager's API, path /policy-sets - using the same policy name across different applications\2. Execute a GET request to the Policy Manager's API, path /policy-sets - after post using the same policy name across different applications \ \Expected Result\1. Verify that a success message is returned along with a 201 HTTP code.\2. A 200 HTTP code is returned together with a list with all existing policies in a JSON format. The list contains policies with the same name across different applications. \ \Notes\1.Body used on step 1:{""namespace"": """"(required),""applicationName"": """"(required),""policyName"": """"(required),""aclId"": ""3"",""conditions"": [],""policyTarget"":{},""policyCombiningAlgorithm"": null}\2. Policy is identified uniquely by Application name and name space and ID policy. Can only create policies for previously created policy sets.",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend,cyber",/Policy Manager/Cyber Security,High
VLBSFI_GDP_AG,Test,"For the same application, different spaces can have polices with the same name via API","Description\Verify for the same application, different spaces can have policies with the same name.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1818]FOR THE SAME APPLICATION, DIFFERENT SPACES CAN HAVE POLICES WITH THE SAME NAME VIA API\ \Preconditions\Logged-in user must have permissions to access application.\At least one policy  must be created. \ \Procedure\1. Execute a POST request to the Policy Manager's API, path /policy-sets - using the same policy name across different spaces\2. Execute a GET request to the Policy Manager's API, path /policy-sets - after post using the same policy name across different spaces\ \Expected Result\1. Verify that a success message is returned along with a 201 HTTP code.\2. A 200 HTTP code is returned together with a list with all existing policies in a JSON format. The list contains policies with the same name across different spaces. \ \Notes\1. Body used on step 1: {""namespace"": """"(required),""applicationName"": """"(required),""policyName"": """"(required),""aclId"": ""3"",""conditions"": [],""policyTarget"":{},""policyCombiningAlgorithm"": null}\2. Policy is identified uniquely by Application name and name space and ID policy. Can only create policies for previously created policy sets.",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend,cyber",/Policy Manager/Cyber Security,High
VLBSFI_GDP_AG,Test,"For a given space/application, a policy name cannot be changed to a name that already exists","Description\Verify that the policy name cannot be changed to one that already exists in the same space and application.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1819] - FOR A GIVEN SPACE/APPLICATION, A POLICY NAME CANNOT BE CHANGED TO A NAME THAT ALREADY EXISTS\ \Preconditions\Logged-in user must have permissions to access application.\At least one policy must be created. \ \Procedure\1. Execute a PUT request to the Policy Manager's API, path /policy-sets/{namespace}/{nameapplication}/{policyId} - using an existing policy name\2. Execute a GET request to the Policy Manager's API, path /policy-sets - after a put with an existing policy name\ \Expected Result\1. Verify that a success message is returned along with a 400 HTTP code - policy name not updated\2. A 200 HTTP code is returned togheter with a list with all existing policies is in JSON format. Policy name from step 1 is not updated. \ \Notes\1. Policy is identified uniquely by Application name and name space and ID policy.\2. Include a body with the required JSON data, ensuring that the policie name exist on same space and application. Body used on step 1: {""namespace"": """"(required),""applicationName"": """"(required),""policyId"":"""", ""policyName"": """"(required),""aclId"": ""3"",""conditions"": [],""policyTarget"":{},""policyCombiningAlgorithm"": null}",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend,cyber",/Policy Manager/Cyber Security,High
VLBSFI_GDP_AG,Test,Add an access control list to a policy via API,"Description\Verify that the Policy Manager allows the user to add an access control list to a policy.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1820]ADD AN ACCESS CONTROL LIST TO A POLICY VIA API\ \Preconditions\Logged-in user must have permissions to access application.\At least one policy must be created. \ \Procedure\1. Execute a PUT request to the Policy Manager's API, path /policy-sets/{namespace}/{nameapplication} - add access control list\2. Execute a GET request to the Policy Manager's API, path /policy-sets - after adding an access control list \ \Expected Result\1. Verify that a success message is returned along with a 202 HTTP code - add access control list\2. A 200 HTTP code is returned together with a list with all existing policies in JSON format. The list contains the updated policy with the new access control list.\ \Notes\1. Policy is identified uniquely by Application name and name space and ID policy.\2. Include a body with the required JSON data. Body used on step 1: {""namespace"": """"(required),""applicationName"": """"(required),""policyId"":"""", ""policyName"": """"(required),""aclId"": """"(required),""conditions"": [],""policyTarget"":{},""policyCombiningAlgorithm"": null}",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,Critical
VLBSFI_GDP_AG,Test,Remove an access control list from a policy via API,"Description\Verify that the Policy Manager allows the user to remove an access control list from a policy.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1821] - REMOVE AN ACCESS CONTROL LIST FROM A POLICY VIA API\ \Preconditions\Logged-in user must have permissions to access application.\At least one policy must be created. \ \Procedure\1. Execute a PUT request to the Policy Manager's API, path /policy-sets/{namespace}/{nameapplication} - remove access control list\2. Execute a GET request to the Policy Manager's API, path /policy-sets -after removing an access control list\ \Expected Result\1. Verify that a success message is returned along with a 202 HTTP code - remove access control list\2. A 200 HTTP code is returned together with all existing policies in JSON format. The list contains the updated policy without the access control list.\ \Notes\1. Policy is identified uniquely by Application name and name space and ID policy.\2. Include a body with the required JSON data. Body used on step 1: {""namespace"": """"(required),""applicationName"": """"(required),""policyId"":"""", ""policyName"": """"(required),""aclId"": """"(required),""conditions"": [],""policyTarget"":{},""policyCombiningAlgorithm"": null}",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,Critical
VLBSFI_GDP_AG,Test,Different access control lists must have different names ,"Description\Verify that the Policy Manager doesn't allow the user to create an Access Control Lists with an existing name.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1822]DIFFERENT ACCESS CONTROL LISTS MUST HAVE DIFFERENT NAMES \ \Preconditions\Logged-in user must have permissions to access application.\At least one access control list must be created. \ \Procedure\1. Execute a POST request to the Policy Manager's API, path /acess-control-lists - using an existing name\2. Execute a GET request to the Policy Manager's API, path /acess-control-lists - after post using an existing name\ \Expected Result\1. A 403 HTTP code is returned - acl with repeated name\2. A 200 HTTP code is returned. A list with all existing Access Control Lists is returned in a JSON format. The Access Control List from step 1 is not repeated.\ \Notes\1. Include a body with the required JSON data, ensuring that the Access Control List being created has the same name as an existing acl.\Body used in step 1: form-data (key/value)\acls/<file.csv> (*)\name/<repeated_name> (*)\description/<description> ",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,High
VLBSFI_GDP_AG,Test,Cannot create an access control list without the required data,"Description\Verify that the user cannot create an Access Control List without the required data.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1823]CANNOT CREATE AN ACCESS CONTROL LIST WITHOUT THE REQUIRED DATA\ \Preconditions\Logged-in user must have permissions to access application.\ \Procedure\1. Execute a POST request to the Policy Manager's API, path /acess-control-lists - creation without the required data\2. Execute a GET request to the Policy Manager's API, path /acess-control-lists - after post without the required data\ \Expected Result\1. A 412 HTTP code.\2. A 200 HTTP code is returned . A list with all existing Access Control Lists is returned in a JSON format. The Access Control List from step 1 was not created.		\ \Notes\1. Include a body with the required JSON dBody used in step 1: form-data (key/value)\BODY1:\acls/<file.csv> (*)\name/""   ""(*)\description/<description>\BODY2:\acls/<file.csv> (*)\name/""""(*)\description/<description> \BODY3:\acls/<file.csv> (*)\name/null(*)\description/<description>\BODY4:\acls/null (*)\name/<acl_name>(*)\description/<description>",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,High
VLBSFI_GDP_AG,Test,List policy sets via API,"Description\Verify that the Policy Manager allows a user to list Policies Sets via API.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1824]LIST POLICY SETS VIA API\ \Preconditions\Logged-in user must have permissions to access application.\At least on policy set must be created.\ \Procedure\1. Execute a GET request to the Policy Sets Manager's API, path /policy-sets.\2. Execute a GET request to the Policy Sets Manager's API, path /policy-sets/{namespace}/{nameapplication}.\ \Expected Result\1. The list of existing policy sets is returned in JSON format along with a 200 HTTP code.\2. The policy sets for that space and application is returned in JSON format along with a 200 HTTP code.\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,Critical
VLBSFI_GDP_AG,Test,Filtering by namespaces and applications via API ,"Description\Verify that Policy Manager allow to filtering the list of policy sets by application and namespace.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1825] - FILTERING BY NAMESPACES AND APPLICATIONS VIA API \ \Preconditions\Logged-in user must have permissions to access application.\At least more than one policy must be created with different namespaces and applications. \ \Procedure\1. Execute a GET request to the Policy Manager´s API´s, path /policy-sets-metadata.\ \Expected Result\1. A 200 HTTP code is also returned. A list with all existing applications and namespaces is returned in JSON format.\ \Notes\1. Example of the returned data: {""namespaces"" : [""ns1"", ""ns2"", ....],""applications"": [""app1"", ""app2"",. ...]}",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,High
VLBSFI_GDP_AG,Test,Filtering policy sets by namespace via API ,"Description\Verify if the Policy Manager allows filtering policy sets by namespace\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1826] - FILTERING POLICY SETS BY NAMESPACE VIA API \ \Preconditions\Logged-in user must have permissions to access application.\ \Procedure\Given Policy-sets for the namespace ""GDP""\And Policy-sets for the namespace ""QA""\When A GET request to /policy-sets/""GDP"" is made\ \Expected Result\Then A 200 HTTP code is returned\And A list only containing policy sets with namespace ""GDP"" are returned\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,High
VLBSFI_GDP_AG,Test,Filtering policy sets by application via API ,"Description\Verify if the Policy Manager allows filtering policy sets by applicationName\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1827] - FILTERING POLICY SETS BY APPLICATION VIA API \ \Preconditions\Logged-in user must have permissions to access application.\ \Procedure\Given The Policy Set for the namespace ""GDP"" and application ""Alarm Manager SP"" created\When A GET request to /policy-sets/""GDP""/""Alarm Manager SP"" is made\ \Expected Result\Then A 200 HTTP code is returned\And The list only contains the policy-set for ""Alarm Manager SP""\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,High
VLBSFI_GDP_AG,Test,List access control lists via API,"Description\Verify that the Policy Manager allows the user to list all Access Control Lists.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1828] - LIST ACCESS CONTROL LISTS VIA API\ \Preconditions\Logged-in user must have permissions to access application.\At least one Access Control List must be created.	\ \Procedure\1. Execute a GET request to the Policy Manager's API, path /acess-control-lists?aclID=<acl_id>\ \Expected Result\1. A 200 HTTP code is returned. The Access Control List with the given acl_id is returned.\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,Critical
VLBSFI_GDP_AG,Test,List all access control lists - simple list via API,Description\Verify that the Policy Manager allows the user to list all Access Control Lists in a simple list (without ACL entries)\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1829]LIST ALL ACCESS CONTROL LISTS - SIMPLE LIST VIA API\ \Preconditions\Logged-in user must have permissions to access application.\ \Procedure\Given Policy Manager with Access control lists\When A GET request to /access-control-list/simple-list is made\ \Expected Result\Then A 200 HTTP code is returned\And An ACL simple list is returned\ \Notes\,Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,Critical
VLBSFI_GDP_AG,Test,List all entries for an access control list via API ,"Description\Verify that the Policy Manager allows the user to list all Access Control Lists in a simple list (without ACL entries)\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1830] - LIST ALL ENTRIES FOR AN ACCESS CONTROL LIST VIA API \ \Preconditions\Logged-in user must have permissions to access application.\ \Procedure\Given Policy Manager with the Access control list ""Test ACL""\And The aclId for the Access control list ""Test ACL""\When A GET request to /access-control-list/<aclId>/entries is made\ \Expected Result\Then A 200 HTTP code is returned\ And The entry list is returned\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,Critical
VLBSFI_GDP_AG,Test,Verify the number of objects in an access control list,"Description\Verify that the Policy Manager displays the number of existing objects for each Access Control List.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1831] - VERIFY THE NUMBER OF OBJECTS IN AN ACCESS CONTROL LIST\ \Preconditions\Logged-in user must have permissions to access application.\ \Procedure\Given Policy Manager with Access control lists\When A GET request to /access-control-list/simple-list is made\ \Expected Result\Then A 200 HTTP code is returned\ And An ACL simple list is returned\And Each ACL has the ""entriesCount"" set\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,High
VLBSFI_GDP_AG,Test,Cannot import an access control list from an invalid file,"Description\Verify that the Policy Manager doesn't create an Access Control Lists when the imported csv file is invalid.	\ \IVV Techniques\Functional/Black-box testi\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1832] - CANNOT IMPORT AN ACCESS CONTROL LIST FROM AN INVALID FILE\ \Preconditions\Logged-in user must have permissions to access application.	\ \Procedure\1. Execute a POST request to the Policy Manager's API, path /access-control-lists - acl from invalid csv file\2. Execute a GET request to the Policy Manager's API, path /access-control-lists - after creation from an invalid file	\ \Expected Result\1. A 406 HTTP code is returned - acl not created, invalid f\2. A 200 HTTP code is returned. A list with all existing Access Control Lists is returned in a JSON format. The list doesn't contain the Access Control List from step 1.\ \Notes\1. Include a body with the required JSON data.Body used in step 1: form-data (key/value)\BODY1:\acls/<file.xpt> (*)\ name/<acl_name> (*)\description/<description>\ \BODY2:\acls/<invalid_file.csv> (file doesn't respect the csv style) (*)\name/<acl_name> (*)\description/<description>\ \Example invalid csv files:\<invalid_file1.csv>:\column1 column2\null,\ \<invalid_file2.csv>:\column1 column2\val1,\ \<invalid_file3.csv>:\column1 column2\<spaces>\ \(*) mandatory",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,High
VLBSFI_GDP_AG,Test,Import an access control list with 2mb,"Description\Verify that the Policy Manager allows the import of 2MB csv files.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1833] - IMPORT AN ACCESS CONTROL LIST WITH 2MB\ \Preconditions\Logged-in user must have permissions to access application.\ \Procedure\Given The Policy Manager test data ""Import csv file with 2 MB""\When A POST request to /access-control-lists is made\ \Expected Result\Then A 200 HTTP code is returned\And A json body containing aclId, number of fieldNames and entries is returned\ \Notes\1. Include a body with the required JSON data. Body ""Import csv file with 2 MB"": form-data (key/value)\acls/<file.csv> (file size 2 MB)(*)\name/<acl_name> (*)\description/<description> 
",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,High
VLBSFI_GDP_AG,Test,Cannot import an access control list bigger than 2mb,"Description\Verify that the Policy Manager doesn't allow csv files bigger than 2MB.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1834] - CANNOT IMPORT AN ACCESS CONTROL LIST BIGGER THAN 2MB\ \Preconditions\Logged-in user must have permissions to access application.\ \Procedure\1. Execute a POST request to the Policy Manager's API, path /access-control-lists - csv file bigger than 5MB\2. Execute a GET request to the Policy Manager's API, path /access-control-lists - after try import file bigger than 5MB\ \Expected Result\1. A 500 HTTP code is returned - acl not created, invalid file size\2. A 200 HTTP code is returned. A list with all existing Access Control Lists is returned in a JSON format. The list doesn't contain the Access Control List from step 1.\ \Notes\1. Include a body with the required JSON data.Body used in step 1: form-data (key/value)\acls/<file.csv> (file size 2.01 MB)(*)\name/<acl_name> (*)\description/<description>\(*) mandatory",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,High
VLBSFI_GDP_AG,Test,Import an access control list with 16 columns,"Description\Verify that the Policy Manager allows csv files bigger than 5MB.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1835] - IMPORT AN ACCESS CONTROL LIST WITH 16 COLUMNS\ \Preconditions\Logged-in user must have permissions to access application.\ \Procedure\Given The Policy Manager test data ""Import csv file with 16 Columns""\When A POST request to /access-control-lists is made\ \Expected Result\Then A 200 HTTP code is returned\ And A json body containing aclId, number of fieldNames and entries is returned\ \Notes\1. Include a body with the required JSON data. Body used in step 1: form-data (key/value)\acls/<file.csv> (file with 16 columns)(*)\name/<acl_name> (*)\description/<description> 
",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,High
VLBSFI_GDP_AG,Test,Cannot import an access control list with more than 16 columns,"Description\Verify that the Policy Manager doesn't allow csv files with more than 16 columns.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1836] - CANNOT IMPORT AN ACCESS CONTROL LIST WITH MORE THAN 16 COLUMNS\ \Preconditions\Logged-in user must have permissions to access application.	\ \Procedure\1. Execute a POST request to the Policy Manager's API, path /access-control-lists - csv file with more than 16 columns\2. Execute a GET request to the Policy Manager's API, path /access-control-lists - after try import file with more than 16 columns\ \Expected Result\1. A 400 HTTP code is returned - acl not created, invalid file size\2. A 200 HTTP code is returned. A list with all existing Access Control Lists is returned in a JSON format. The list doesn't contain the Access Control List from step 1.\ \Notes\1. Include a body with the required JSON data. Body used in step 1: form-data (key/value)\acls/<file.csv> (file with 17 columns)(*)\name/<acl_name> (*)\description/<description>\(*) mandatory",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,High
VLBSFI_GDP_AG,Test,Cannot update an access control list to an existing name via API,"Description\Verify that the Policy Manager doesn't allow the user to update an Access Control Lists to an existing name. \ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1837] - CANNOT UPDATE AN ACCESS CONTROL LIST TO AN EXISTING NAME VIA API\ \Preconditions\Logged-in user must have permissions to access application.\At least two Access Control List must be created.\ \Procedure\1. Execute a POST request to the Policy Manager's API, path /acess-control-lists - update to an existing name\2. Execute a GET request to the Policy Manager's API, path /acess-control-lists - after try update to an existing name\3. Verify if the Access Control List was not updated\ \Expected Result\1. Verify that a error message is returned along with a 403 HTTP code.- update failed\2. A 200 HTPP code is returned. A list with all existing Access Control List is returned in JSON format. The Access Control List from step one is not repeated.\3. The Access Control List was not updated.\ \Notes\1. Include a body with the required JSON data. Body used in step 1: form-data (key/value)\acls/<different_file.csv>(*)\name/<existing_acl_name> (*) \aclID/<acl_id>(**)\description/<different_description>\(*) mandatory\(**)acl id of acl to be updated",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,High
VLBSFI_GDP_AG,Test,Cannot delete an access control list belonging to a policy,"Description\Verify that the Policy Manager doesn't allow the user to delete an Access Control Lists associated with a policy.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1838] - CANNOT DELETE AN ACCESS CONTROL LIST BELONGING TO A POLICY\ \Preconditions\Logged-in user must have permissions to access application.\The Access Control List to be deleted must be associated with a policy\ \Procedure\1. Execute a DELETE request to the Policy Manager's API, path /acess-control-lists/<aclId> - acl associated with a policy\2. Execute a GET request to the Policy Manager's API, path /acess-control-lists.\ \Expected Result\1. A 403 code is returned - acl associated with a policy\2. A 200 code is returned. A list with all existing Access Control Lists is returned in JSON format. The Access Control List from step 1 is present.\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,Critical
VLBSFI_GDP_AG,Test,Export an access control list via API,"Description\Verify that the Policy Manager doesn't allow the user to delete an Access Control Lists associated with a policy.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1839]EXPORT AN ACCESS CONTROL LIST VIA API\ \Preconditions\Logged-in user must have permissions to access application.\At least one Access Control List must be created.\ \Procedure\1. Execute a GET request to the Policy Manager's API, path /acess-control-lists/export/<aclId>\2. Verify the response body\ \Expected Result\1. A 200 HTTP code is returned - acl exported\2. The response body contains all the Access Control List information.\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,Critical
VLBSFI_GDP_AG,Test,Update an access control list from an exported csv file,"Description\Verify that the Policy Manager is able to update an Access Control Lists from an exported file.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1840]UPDATE AN ACCESS CONTROL LIST FROM AN EXPORTED CSV FILE\ \Preconditions\Logged-in user must have permissions to access application.\At least one Access Control List must be created.\ \Procedure\1. Execute a GET request to the Policy Manager's API, path /acess-control-lists/export/<aclID>\2. Copy the response body to a .csv file (Add more columns and entries)\3. Execute a POST request to the Policy Manager's API, path /acess-control-lists/<aclId> - using updated csv file\4. Verify if the Access Control List is according to the csv file.\ \Expected Result\1. A 200 HTTP code is returned - acl exported\2. Csv file is updated.\3. A 200 HTPP code is returned. A list with all existing Access Control List is returned in JSON format. The list contains the updated Access Control List.\4. The fieldNames and aclEntries are filled according to the csv file.\ \Notes\1. Include a body with the required JSON data. Body used in step 3: form-data (key/value)\acls/<different_file.csv>(*)\name/<acl_name> (*)\aclID/<acl_id>(**)\description/<description>\ \(*) mandatory\(**)acl id of acl to be updated
",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,Critical
VLBSFI_GDP_AG,Test,Navigate to gdp cad url and click on policy manager,Description\Verify that Policy Manager provides a central policies management service.\ \IVV Techniques\Functional/Black-box testing\Traceability\ \STD Reference\[GDP-STD-1841] - NAVIGATE TO GDP CAD URL AND CLICK ON POLICY MANAGER\ \Preconditions\Logged-in user must have permissions to access application.\ \Procedure\1. Navigate to the GDP CAD URL.\2. Click on the link for the Policy Manager GDP application.\ \Expected Result\1. CAD loads successfully. A list of all GDP applications and Key Performance indicators are shown.\2. Policy Manager's application is loaded successfully. A list of all policy sets is displayed on main panel. \ \Notes\,Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend,cyber",/Policy Manager/Cyber Security,High
VLBSFI_GDP_AG,Test,Policy Manager notifies policy changes to alarm manager - add a policy,"Description\Verify that the Policy Manager notifies policy consumers when an update is done. \ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1842] - POLICY MANAGER NOTIFIES POLICY CHANGES TO ALARM MANAGER - ADD A POLICY\ \Preconditions\Logged-in user must have permissions to access application.\ \Procedure\Given The Policy Manager test data ""Gdpadmin policy all actions enabled""\When A PUT request to Policy Manager /policy-sets/""GDP/""Alarm Manager SP""\ And A GET request to Alarm Manager ""/alarms""\ \Expected Result\Then A 202 HTTP code is returned\And The alarm list contains alarms\ \Notes\""Gdpadmin policy all actions enabled"" policies:\ [{""namespace"": GDP,""applicationName"":""Alarm Manager SP"",""policyName"":policy_name>,""policyDescription"": """",""aclId"": <acl_id> (acl id for precondition acl),""conditions"": [{""effect"": ""PERMIT"",""expression"": ""keyMatch(r.sub.activeProfile.name,p.profile) && keyMatch(r.obj.location,p.location) && keyMatch(r.obj.functionalCategoryCode,p.functionalCategoryCode) && keyMatch(r.act,p.act)""}],""policyTarget"":[{""key"":sub"",""value"":com.thalesgroup.gts.gdp.authz.model.GDPOAuth2Authentication""},{""key"":obj"",""value"":""com.thalesgroup.gts.gdp.alarm.data.authorization.AlarmAuthorizationParams""},{""key"": ""act"",""value"": ""java.lang.String""}],""policyCombiningAlgorithm"":""PERMIT_UNLESS_DENY""}]\ \ACL CSV file: (precondition 4)\<file>.csv\user,act\gdpadmin,*",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,Critical
VLBSFI_GDP_AG,Test,Policy Manager notifies policy changes to other applications - remove policies,"Description\Verify that the Policy Manager notifies policy consumers when an update is done - policy removed\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1843] - POLICY MANAGER NOTIFIES POLICY CHANGES TO OTHER APPLICATIONS - REMOVE POLICIES\ \Preconditions\Logged-in user must have permissions to access application.\ \Procedure\Given The Policy Manager test data ""Alarm Manager without policies""
When A PUT request to Policy Manager /policy-sets/""GDP/""Alarm Manager SP""\And A GET request to Alarm Manager ""/alarms""\ \Expected Result\Then A 202 HTTP code is returned\And The alarm list contains no alarms\ \Notes\Test Data:\""Alarm Manager without policies""\policies:[]",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend,cyber",/Policy Manager/Cyber Security,Critical
VLBSFI_GDP_AG,Test,Alarm Manager automatically creates a policy set,"Description\Verify if the Alarm Manager policy set is created automatically\ \IVV Techniques\Functional/Black-box testing\Traceability\ \STD Reference\[GDP-STD-1844] - ALARM MANAGER AUTOMATICALLY CREATES A POLICY SET\ \Preconditions\Logged-in user must have permissions to access application.\ \Procedure\Given The Alarm Manager Policy Set\When A DELETE request to /policy-sets/""GDP""/""Alarm Manager SP""\And A GET request to /policy-sets is made
\ \Expected Result\Then A 204 HTTP code is returned\And The Alarm manager Policy Set is present in the policy sets list\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,Critical
VLBSFI_GDP_AG,Test,List policy sets ,"Description\Verify that the Policy Manager allows authorized users to list policy sets via UI\ \IVV Techniques\Functional/Black-box testing\Traceability\ \STD Reference\[GDP-STD-1845]LIST POLICY SETS \ \Preconditions\Logged-in user must have permissions to access application.\At least more than one policy set must be created. \ \Procedure\1. Navigate to the GDP Policy Manager URL.\2. Verify the policy set list.\3. Verify the item list. \ \Expected Result\1. Policy Manager application is loaded successfully. A list of all policy sets is displayed on main panel.\2. The policy set list contains the following fields: Namespace, Application, Description, Number of existing Policies\3. The items of the list are ordered by Namespace (1st criteria) and Application (2nd criteria), both in Ascending order ""A to Z"".\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,frontend",/Policy Manager/Frontend,Critical
VLBSFI_GDP_AG,Test,Filter policy sets by namespace,Description\Verify that the Policy Manager allows filter the list of policy sets by namespace.\ \IVV Techniques\Functional/Black-box testing\Traceability\ \STD Reference\[GDP-STD-1846] - FILTER POLICY SETS BY NAMESPACE\ \Preconditions\Logged-in user must have permissions to access application.\At least more than one policy set must be created.\At least two different namespaces exist.\ \Procedure\1. Navigate to the GDP Policy Manager URL.\2. Click the namespace filter.\3. Select a namespace.\4. Inspect the policy set list\ \Expected Result\1. Policy Manager's application is loaded successfully. A list of all policy sets is displayed on main panel.\ 2. A list of available namespaces is shown.\3. Namespace selected.\4. The policy set list only contains policy sets for the selected namespace\ \Notes\,Policy Manager,1.3.0,"TEAM-IV,GDP,manual,frontend",/Policy Manager/Frontend,High
VLBSFI_GDP_AG,Test,Filter policy sets by application,Description\Verify that the Policy Manager allows filter the list of policy sets by application.\ \IVV Techniques\Functional/Black-box testing\Traceability\ \STD Reference\[GDP-STD-1847] - FILTER POLICY SETS BY APPLICATION\ \Preconditions\Logged-in user must have permissions to access application.\At least more than one policy set must be created.\At least two different applications exist.\ \Procedure\1. Navigate to the GDP Policy Manager URL.\2. Click the application filter.\3. Select an application.\4. Inspect the policy set list.\ \Expected Result\1. Policy Manager's application loaded successfully. A list of all policy sets is displayed on main panel.\2. A list of available applications is shown.\3. The application is selected\4. The policy set list only contains policy sets for the selected application\ \Notes\,Policy Manager,1.3.0,"TEAM-IV,GDP,manual,frontend",/Policy Manager/Frontend,High
VLBSFI_GDP_AG,Test,Filter policy sets by application and namespace,Description\Verify that the Policy Manager allows filter the list of policy sets by application and namespace.\ \IVV Techniques\Functional/Black-box testing\Traceability\ \STD Reference\[GDP-STD-1848] - FILTER POLICY SETS BY APPLICATION AND NAMESPACE\ \Preconditions\Logged-in user must have permissions to access application.\At least more than one policy set must be created.\At least two different namespaces exist.\At least two different applications exist.\ \Procedure\1. Navigate to the GDP Policy Manager URL.\2. Click the application filter.\3. Select one application.\4. Select one namespace.\5. Inspect the policy set list\ \Expected Result\1. Policy Manager's application is loaded successfully. A list of all policy sets is displayed on main panel.\2. A list of available applications is shown.\3. The application is selected.\4. The space is selected.\5. The policy set list only contains policy sets for the selected application-namespace\ \Notes\,Policy Manager,1.3.0,"TEAM-IV,GDP,manual,frontend",/Policy Manager/Frontend,High
VLBSFI_GDP_AG,Test,Search for a policy set,"Description\Verify that the Policy Manager allows search for a policy set using partial matching for the following fields:\- Description\- Namespace\- Application\ \IVV Techniques\Functional/Black-box testing\Traceability\ \STD Reference\[GDP-STD-1849] - SEARCH FOR A POLICY SET\ \Preconditions\Logged-in user must have permissions to access application.\At least more than one policy set must be created.\ \Procedure\1. Navigate to the GDP Policy Manager URL.\2. Click the search field.\3. Search by an existing application.\4. Click the ""x"" icon.\5. Search by an existing namespace.\6. Click the ""x"" icon.\7. Search by an existing description.\8. Click the ""x"" icon. \ \Expected Result\1. Policy Manager's application is loaded successfully. A list of all policy sets is displayed on main panel.\2. A list of available applications is shown.\3. The policy sets with the searched application are displayed.All policy sets whose description or namespace matches the search words are also listed.The list is sorted by Namespace (1st criteria) and Application (2nd criteria), both in Ascending order ""A to Z"".\4. The search field is cleared and the list with all policy sets is displayed. The list is sorted by Namespace (1st criteria) and Application (2nd criteria), both in Ascending order ""A to Z"".\5. The policy sets with the searched namespace are displayed.All policy sets whose description or application matches the search words are also listed.The list is sorted by Namespace (1st criteria) and Application (2nd criteria), both in Ascending order ""A to Z"".\6. The search field is cleared and the list with all policy sets is displayed. The list is sorted by Namespace (1st criteria) and Application (2nd criteria), both in Ascending order ""A to Z"".\7. Only the policy sets with the searched description are displayed. The search result is sorted by Namespace (1st criteria) and Application (2nd criteria), both in Ascending order ""A to Z"".\7. The policy sets with the searched description or partial description are displayed.All policy sets whose application or namespace matches the search words are also listed.The list is sorted by Namespace (1st criteria) and Application (2nd criteria), both in Ascending order ""A to Z"".\8. The search field is cleared and the list with all policy sets is displayed. The list is sorted by Namespace (1st criteria) and Application (2nd criteria), both in Ascending order ""A to Z"".\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,frontend",/Policy Manager/Frontend,High
VLBSFI_GDP_AG,Test,Delete a policy set ,"Description\Verify if the Policy Manager allows the user to delete a policy set\ \IVV Techniques\Functional/Black-box testing\Traceability\ \STD Reference\[GDP-STD-1850]DELETE A POLICY SET \ \Preconditions\Logged-in user must have permissions to access application.\At least more than one policy set must be created.\ \Procedure\Given The Policy Manager opened\And The Policy Set ""GDP"" ""Alarm Manager SP"" created\When The user expands the policy set ""GDP"" ""Alarm Manager SP""\And The user clicks ""Delete"" to eliminate the Policy Set\And The user confirms the Delete policy set action\ \Expected Result\Then The policy set card is expanded\And A confirmation message to delete a policy set is displayed\And The policy set is removed from the policy set list\And A Delete Success message is displayed\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,frontend",/Policy Manager/Frontend,Critical
VLBSFI_GDP_AG,Test,List policies within a policy set ,"Description\Verify that the Policy Manager allows users to list the existing policies of a policy set.\ \IVV Techniques\Functional/Black-box testing\Traceability\ \STD Reference\[GDP-STD-1851] - LIST POLICIES WITHIN A POLICY SET\ \Preconditions\Logged-in user must have permissions to access application.\At least more than one policy set must be created.\ \Procedure\Given The Policy Manager opened\And The Policy Set ""GDP"" ""Alarm Manager SP"" created\When The user expands the policy set ""GDP"" ""Alarm Manager SP""\ \Expected Result\Then The policy list for the policy set ""GDP"" ""Alarm Manager SP"" is displayed\And The Policy information ""Description"", ""ACL Name"", ""Entities"", ""Policy Name"" is set\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,frontend",/Policy Manager/Frontend,Critical
VLBSFI_GDP_AG,Test,Delete a policy ,"Description\Verify the the Policy Manager allows users to delete policies within a policy set\ \IVV Techniques\Functional/Black-box testing\Traceability\ \STD Reference\[GDP-STD-1852] - DELETE A POLICY \ \Preconditions\Logged-in user must have permissions to access application.\At least more than one policy set must be created.\ \Procedure\Given The Policy Manager opened\And The Policy Set ""GDP"" ""Alarm Manager SP"" created\And The Policy ""testPolicy"" created for Policy Set ""GDP"" ""Alarm Manager SP""\When The user expands the policy set ""GDP"" ""Alarm Manager SP""\And The user clicks ""Edit"" to edit the Policy Set\And The user selects the ""testPolicy"" policy\And The user clicks ""Actions"" to see the edit actions on the policy set\And The user clicks ""Remove"" to update a policy\And The user clicks ""Save"" to save the policy set\ \Expected Result\Then The ""GDP"" ""Alarm Manager SP"" policy set is expanded\And The Policy set desciption field becomes editable\And The available policy set actions are displayed\And The policy ""testPolicy"" is removed from the policy set\And A Success Message is displayed\And The policy set list doesn't display the policy ""testPolicy""\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,frontend",/Policy Manager/Frontend,Critical
VLBSFI_GDP_AG,Test,Policy Manager application logs - UI delete operation,"Description\Verify that the UI delete operations are logged\ \IVV Techniques\Functional/Black-box testing\Traceability\ \STD Reference\[GDP-STD-1853] - POLICY MANAGER APPLICATION LOGS - UI DELETE OPERATION\ \Preconditions\Logged-in user must have permissions to access application.\At least more than one policy set must be created.\ \Procedure\Given A Deleted Policy Set\When The User navigates to Application Log Manager\And The user Selects the ""Policy Manager"" component\And The user inspects the logs\ \Expected Result\Then The Application Log Manager is opened\And The ""Policy Manager"" is selected\And The log list contais a ""delete"" log\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,frontend,safety",/Policy Manager/Safety,High
VLBSFI_GDP_AG,Test,Policy Manager application logs - UI edit/modify operation,"Description\Verify that the UI update operations are logged\ \IVV Techniques\Functional/Black-box testing\Traceability\ \STD Reference\[GDP-STD-1854] - POLICY MANAGER APPLICATION LOGS - UI EDIT/MODIFY OPERATION\ \Preconditions\Logged-in user must have permissions to access application.\At least more than one policy set must be created.\ \Procedure\Given A Policy Set update\When The User navigates to Application Log Manager\And The user Selects the ""Policy Manager"" component\And The user inspects the logs\ \Expected Result\Then The Application Log Manager is opened\And The ""Policy Manager"" is selected\And The log list contais a ""edit"" log\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,frontend,safety",/Policy Manager/Safety,Critical
VLBSFI_GDP_AG,Test,Policy Manager alerts users of unsaved changes - save changes,"Description\Verify that can save unsaved changes.\ \IVV Techniques\Functional/Black-box testing\Traceability\ \STD Reference\[GDP-STD-1855] - POLICY MANAGER ALERTS USERS OF UNSAVED CHANGES - SAVE CHANGES\ \Preconditions\Logged-in user must have permissions to access application.\At least more than one policy set must be created.\ \Procedure\Given The Policy Manager opened\And The Policy Set ""GDP"" ""Alarm Manager SP"" created\And The Policy ""testPolicy"" created for Policy Set ""GDP"" ""Alarm Manager SP""\And The Policy Set ""GDP"" ""Alarm Manager SP"" expanded\And The Policy ""testPolicy"" updated for Policy Set ""GDP"" ""Alarm Manager SP""\When The user refreshes the policy set  list\And The User presses ""Save""\ \Expected Result\Then A popup message ""You have pending changes"" is displayed\And Changes are saved\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,frontend",/Policy Manager/Frontend,High
VLBSFI_GDP_AG,Test,Policy Manager alerts users of unsaved changes - discard changes,"Description\Verify that can discard unsaved changes.\ \IVV Techniques\Functional/Black-box testing\Traceability\ \STD Reference\[GDP-STD-1856] - POLICY MANAGER ALERTS USERS OF UNSAVED CHANGES - DISCARD CHANGES\ \Preconditions\Logged-in user must have permissions to access application.\At least more than one policy set must be created.\ \Procedure\Given The Policy Manager opened\And The Policy Set ""GDP"" ""Alarm Manager SP"" created\And The Policy ""testPolicy"" created for Policy Set ""GDP"" ""Alarm Manager SP""\And The Policy Set ""GDP"" ""Alarm Manager SP"" expanded\And The Policy ""testPolicy"" for Policy Set ""GDP"" ""Alarm Manager SP"" cloned\When The user collapses the policy set ""GDP"" ""Alarm Manager SP""\And The user clicks ""Discard""\ \Expected Result\Then A popup message ""You have pending changes"" is displayed\And Changes are discarded\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,frontend",/Policy Manager/Frontend,High
VLBSFI_GDP_AG,Test,Policy Manager alerts users of unsaved changes - cancel action,"Description\Verify that can cancel action when there are unsaved changes.\ \IVV Techniques\Functional/Black-box testing\Traceability\ \STD Reference\[GDP-STD-1857] - POLICY MANAGER ALERTS USERS OF UNSAVED CHANGES - CANCEL ACTION\ \Preconditions\Logged-in user must have permissions to access application.\At least more than one policy set must be created.\ \Procedure\Given The Policy Manager opened\And The Policy Set ""GDP"" ""Alarm Manager SP"" created\And The Policy ""testPolicy"" created for Policy Set ""GDP"" ""Alarm Manager SP""\And The Policy Set ""GDP"" ""Alarm Manager SP"" expanded\And The Policy ""testPolicy"" for Policy Set ""GDP"" ""Alarm Manager SP"" cloned\When The user collapses the policy set ""GDP"" ""Alarm Manager SP""\And The user clicks ""Cancel"" to save policy set changes\ \Expected Result\Then A popup message ""You have pending changes"" is displayed\And Changes kept unsaved\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,frontend",/Policy Manager/Frontend,High
VLBSFI_GDP_AG,Test,Update a policy set - add policies,"Description\Verify if the Policy Manager allows the user to delete a policy set\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1858] - UPDATE A POLICY SET - ADD POLICIES\ \Preconditions\Logged-in user must have permissions to access application.\At least more than one policy set must be created.\ \Procedure\Given The Policy Manager opened\And The Policy Set ""GDP"" ""Alarm Manager SP"" created\And The ""test ACL"" created (*see test data)\When The user expands the policy set ""GDP"" ""Alarm Manager SP""\And The user clicks ""Edit"" to edit the Policy Set\And The user clicks ""Actions"" to see the edit actions on the policy set\And The user clicks ""New"" to add a policy\And The user types ""policy test"" in the policy ""name"" field\And The user types ""New policy"" in the policy ""description"" field\And The user expands the ACL policy field\And The user selects the ""test ACL""\And The user types ""test conditon"" in the policy ""condition"" field (*see test data)\And The user clicks ""OK"" in the policy window\And The user clicks ""Save"" to save the policy set\ \Expected Result\Then The ""GDP"" ""Alarm Manager SP"" policy set is expanded\And The Policy set desciption field becomes editable\And The available policy set actions are displayed\And The policy window ""New Policy"" is displayed\And The policy ""name"" is ""policy test""\And The policy ""description"" is ""New policy""\And An ACL list is displayed\And The ACL ""test ACL"" is selected. A sample of its entries is displayed.\And The policy ""condition"" is ""test conditon"" (*see test data)\And The policy window ""New Policy"" is closed\And A Success Message is displayedAnd The policy set list displays the new policy ""policy test""\\ \Notes\ TEST DATA:\ ""test ACL""\name=""test ACL""\acls= <files>.csv\ \ ""test conditon""\""keyMatch(r.sub.username,p.user) && keyMatch(r.act,p.act)""
",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,frontend",/Policy Manager/Frontend,Critical
VLBSFI_GDP_AG,Test,Update a policy set - change description,"Description\Verify the the Policy Manager allows users to update a policy set description\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1859] - UPDATE A POLICY SET - CHANGE DESCRIPTION\ \Preconditions\Logged-in user must have permissions to access application.\At least more than one policy set must be created.\ \Procedure\Given The Policy Manager opened\And The Policy Set ""GDP"" ""Alarm Manager SP"" created\When The user expands the policy set ""GDP"" ""Alarm Manager SP""\And The user clicks ""Edit"" to edit the Policy Set\And The user types ""update description"" in the policy set ""description"" field\And The user clicks ""Save"" to save the policy set\ \Expected Result\Then The ""GDP"" ""Alarm Manager SP"" policy set is expanded\And The Policy set desciption field becomes editable\And The policy set ""description"" is ""update description""\And A Success Message is displayed\And The policy set ""description"" is ""update description""\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,frontend",/Policy Manager/Frontend,Critical
VLBSFI_GDP_AG,Test,Update a policy set - clone policy,"Description\Verify the the Policy Manager allows users to update a policy set description\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1860] - UPDATE A POLICY SET - CLONE POLICY\ \Preconditions\Logged-in user must have permissions to access application.\At least more than one policy set must be created.\ \Procedure\Given The Policy Manager opened\And The Policy Set ""GDP"" ""Alarm Manager SP"" created\And The Policy ""testPolicy"" created for Policy Set ""GDP"" ""Alarm Manager SP"" created\When The user expands the policy set ""GDP"" ""Alarm Manager SP""\And The user clicks ""Edit"" to edit the Policy Set\And The user selects the ""testPolicy"" policy\And The user clicks ""Actions"" to see the edit actions on the policy set\And The user clicks ""Settings"" to update a policy\And The user types ""Clone policy"" in the name field\And The user clicks ""Save AS"" in the policy window\And The user clicks ""Save"" to save the policy set\ \Expected Result\Then The ""GDP"" ""Alarm Manager SP"" policy set is expanded\And The Policy set desciption field becomes editable\And The available policy set actions are displayed\And The policy window ""Policy Settings"" is displayed\And The policy name is ""Clone policy""\And The policy window ""Policy Settings"" is closed\And A Success Message is displayed\And The policy set list displays the policy ""Clone Policy""\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,frontend",/Policy Manager/Frontend,Critical
VLBSFI_GDP_AG,Test,Update a policy - add an entity,"Description\Verify if the user can update a policy belonging to a policy set.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1861] - UPDATE A POLICY - ADD AN ENTITY\ \Preconditions\Logged-in user must have permissions to access application.\At least more than one policy set must be created.\ \Procedure\Given The Policy Manager opened\And The Policy Set ""GDP"" ""Alarm Manager SP"" created\And The Policy ""testPolicy"" created for Policy Set ""GDP"" ""Alarm Manager SP"" (with no entries)\When The user expands the policy set ""GDP"" ""Alarm Manager SP""\And The user clicks ""Edit"" to edit the Policy Set\And The user selects the ""testPolicy"" policy\And The user clicks ""Actions"" to see the edit actions on the policy set\And The user clicks ""Settings"" to update a policy\And The user expands the class list\And The user selects the ""java.lang.String"" class\And The user types ""act"" in the ""entity"" field\And The user clicks ""Add"" to add a new entry\And  The user selectes the ""java.lang.String"" class from the entry table\And The user clicks ""OK"" in the policy window\And The user clicks ""Save"" to save the policy set\ \Expected Result\Then The ""GDP"" ""Alarm Manager SP"" policy set is expanded\And The Policy set desciption field becomes editable\And The available policy set actions are displayed\And The policy window ""Policy Settings"" is displayed\And The policy class list is expanded\And The class ""java.lang.String"" is selected.\And The ""entity"" field is ""act""\And The new entry is added to the entry table\And A sample of its contents is displayed.\And The policy window ""Policy Settings"" is closed\And A Success Message is displayed\And The policy set list displays the policy ""testPolicy"" with ""1"" entity\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,frontend",/Policy Manager/Frontend,Critical
VLBSFI_GDP_AG,Test,List all available access control list (acl),"Description\Verify that the GDP Policy Manager allows authorized users to list ACL via UI.\ \IVV Techniques\Functional/Black-box testing\Traceability\ \STD Reference\[GDP-STD-1862] - LIST ALL AVAILABLE ACCESS CONTROL LIST (ACL)\ \Preconditions\Logged-in user must have permissions to access the application.\English-US locale is selected.\At least two Access Control List exist.\ \Procedure\1. Navigate to the GDP Policy Manager URL.\2. Click the ACL page.\3. Inspect the cards.\4. Expand one card  and inspect the ACL information.\5. Expand another card to verify all ACL information. \ \Expected Result\1. Policy Manager application is loaded successfully. The “Policy Sets” page is pre-selected and the policy sets are listed on the main panel (if they exist).\2. The ACL page is opened and shows the list of existing ACLs, sorted by name in ascending order “A to Z”. All the cards are collapsed.\3. Verify that the Name, Description and Objects fields are displayed on each of the cards.\4. The card is opened. Verify that the Name, Description and Objects fields continue being displayed in this mode. The ACL table is also displayed along with a visual warning that the information displayed here is only a sample.\5. The previously opened card closes automatically and this card is opened.\ \Notes\1. Objects refer to the total number of objects within the ACL (in other words, is the number of ACL table rows).",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,frontend",/Policy Manager/Frontend,Critical
VLBSFI_GDP_AG,Test,ACL information (sample),"Description\Verify that the GDP Policy Manager allows authorized users to see a sample of the objects within the ACL via UI.\ \IVV Techniques\Functional/Black-box testing\Traceability\ \STD Reference\[GDP-STD-1863] - ACL INFORMATION (SAMPLE)\ \Preconditions\At least one Access Control List without objects exists.\At least one Access Control List with ten objects exists.\At least one Access Control List with less than ten objects exists.\At least one Access Control List with more than ten objects exists.\ \Procedure\1. Navigate to the GDP Policy Manager URL.\2. Click the ACL page.\3. Expand a card corresponding to an ACL without objects and inspect the ACL information. Verify that there are no objects listed.\4. Expand a card corresponding to an ACL with less than ten objects and inspect the ACL information. Verify that all objects are listed.\5. Expand a card corresponding to an ACL with ten objects and inspect the ACL information. Verify that all objects are listed.\6. Expand a card corresponding to an ACL with more than ten objects and inspect the ACL information. Verify that only ten objects are listed.\ \Expected Result\1. Policy Manager application is loaded successfully. The “Policy Sets” page  is pre-selected and the policy sets are listed on the main panel (if they exist).\2. The ACL page is opened and shows the list of existing ACLs, sorted by name in ascending order “A to Z”. All the cards are collapsed.\3. The card is opened. The Objects field displays the number of objects within the ACL (in this case “0”) and in the ACL table only the header is displayed.\4. The previously opened card closes automatically and this card is opened. The Objects field displays the number of objects within the ACL and all objects are listed in the ACL table.\5. The previously opened card closes automatically and this card is opened. The Objects field displays the number of objects within the ACL (in this case “10”) and all objects are listed in the ACL table.\6. The previously opened card closes automatically and this card is opened. The Objects field displays the number of objects within the ACL and only ten objects are listed in the ACL table.\ \Notes\1. Objects refer to the total number of objects within the ACL (in other words, is the number of ACL table rows).",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,frontend",/Policy Manager/Frontend,Critical
VLBSFI_GDP_AG,Test,Search for an access control list (acl),"Description\Verify that the GDP Policy Manager allows search for an access control list using partial matching for the Name and Description fields.\ \IVV Techniques\Functional/Black-box testing\Traceability\ \STD Reference\[GDP-STD-1864] - SEARCH FOR AN ACCESS CONTROL LIST (ACL)\ \Preconditions\Logged-in user must have permissions to access the application.\English-US locale is selected.\At least two Access Control List exist.\ \Procedure\1. Navigate to the GDP Policy Manager URL.\2. Click the ACL page.\3. Search for a valid ACL Name.\4. Click the refresh icon.\5. Click on the clear search icon.\6. Search for a valid ACL Description.\ \Expected Result\1. Policy Manager application is loaded successfully. The “Policy Sets” page is pre-selected and the policy sets are listed on the main panel (if they exist).\ 2. The ACL page is opened and shows the list of existing ACLs, sorted by name in ascending order “A to Z”. All the cards are collapsed.\ 3. The ACLs with the searched name are displayed. All ACLs  whose description or namespace matches the search words are also listed. The search result is sorted by ACL name, in Ascending order ""A to Z"".\4. The list is refreshed and only the ACLs that match the search criteria are displayed.\5. The search field is cleared and all ACLs are shown in the list.\6. The ACLs with the searched description are displayed. All ACLs whose name or namespace matches the search words are also listed. The search result is sorted by ACL name, in Ascending order ""A to Z"".\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,frontend",/Policy Manager/Frontend,High
VLBSFI_GDP_AG,Test,Export acl to a csv,Description\Verify that the GDP Policy Manager allows exporting the ACL content to a csv file via UI.\ \IVV Techniques\Functional/Black-box testing\Traceability\ \STD Reference\[GDP-STD-1865] - EXPORT ACL TO A CSV\ \Preconditions\Logged-in user must have permissions to access the application.\English-US locale is selected.\At least one Access Control List with less than ten objects exists.\At least one Access Control List with more than ten objects exists.\ \Procedure\1. Navigate to the GDP Policy Manager URL.\2. Click the ACL page.\3. Select an ACL with less than ten objects and click on the Download icon (with the card collapsed).\4. Inspect the file content.\5. Expand the card corresponding to the same ACL.\6. Click on the Download icon on top right corner.\7. Inspect the file content.\8. Select an ACL with more than ten objects and click on the Download icon (with the card collapsed).\9. Inspect the file content.\10. Expand the card corresponding to the same ACL.\11. Click on the Download icon on top right corner.\12. Inspect the file content.\ \Expected Result\1. Policy Manager application is loaded successfully. The “Policy Sets” page is pre-selected and the policy sets are listed on the main panel (if they exist).\2. The ACL page is opened.\3. File is downloaded.\4. File content includes as many objects as those shown on the ACL table.\5. The card is opened.\6. File is downloaded.\7. File content includes as many objects as those shown on the ACL table.\8. File is downloaded.\9. File content includes all the objects within the selected ACL.\10. The card is opened.\11. File is downloaded.\12. File content includes all the objects within the selected ACL.\ \Notes\,Policy Manager,1.3.0,"TEAM-IV,GDP,manual,frontend",/Policy Manager/Frontend,Critical
VLBSFI_GDP_AG,Test,Dark theme on policy set page ,"Description\Verify that Policy Manager respects the UI Style Guides when changing to the dark theme on the policy set page.\ \IVV Techniques\Traceability\ \STD Reference\[GDP-STD-1866] - DARK THEME ON POLICY SET PAGE\ \Preconditions\UI Style Guides document must be available at https://www.figma.com/file/5XvJq10aLsPjfcvFjv9Wl1/GDP-Elements?node-id=0%3A1\More than one policy sets (with policies) exist. \ \Procedure\1. Navigate to the GDP Policy Manager URL.\2. Click on theme icon of the header.\3. Open the browser Developer Tools.\4. Inspect the background of the UI page.\5. Inspect the header element.\6. Inspect the search element.\7. Inspect the “Namespace” filter element.\8. Click on “Namespace” dropdown.\9. Inspect the “Application Name” filter element.\10. Click on “Application Name” dropdown.\11. Inspect the policy sets cards.\12. Expand a card.\13. Inspect all elements of the card.\14. Click on the edit button.\15. On the policies table select a policy, and in the table menu select the “Settings” option.\16. Inspect all elements of the policy information.\17. Inspect the footer element.\ \Expected Result\1. Policy Manager application is loaded successfully. A list with all policy sets is displayed on main panel.\2. The theme is changed to the dark theme.\3. Browser Developer Tools is opened.\4. Verify on the Developer Tools that the colour of the background is the same as that specified in the UI Style Guides document.\5. Verify on the Developer Tools which colours are shown for the background and title of the header element. These should be the same as those described in the UI Style Guides document.\6. Verify on the Developer Tools which colours are shown for the input of the search element. These must be the same as those described in the UI Style Guides document.\7. Verify on the Developer Tools which colours  are shown for the “Namespace” filter element. These must be the same as those described in the UI Style Guides document.\8. Dropdown is opened. Verify on the Developer Tools which colours  are shown for the dropdown. These must be the same as those described in the UI Style Guides document.\9. Verify on the Developer Tools which colours  are shown for the “Application Name” filter element. These must be the same as those described in the UI Style Guides document.\10. Dropdown is opened. Verify on the Developer Tools which colours  are shown for the dropdown. These must be the same as those described in the UI Style Guides document.\11. Verify on the Developer Tools which colours are shown for the background and labels of the cards. These must be the same as those described in the UI Style Guides document.\12. The card is expanded with policy set information. It  contains the following fields: namespace, application name, description, number of the polices and a grid with policies.\13. Verify on the Developer Tools which colours are shown for all elements of the policy set information. These must be the same as those described in the UI Style Guides document.\14. The Policy set information is editable.\15. The Policy details screen is opened. It must contain the following fields: name, description, entities, ACL, result and condition.\16. Verify on the Developer Tools which colours are shown for all elements of the policy information . These must be the same as those described in the UI Style Guides document.\17. Verify on the Developer Tools which colours are shown for the background and labels of the footer element. These should be the same as those described in the UI Style Guides document.\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,frontend",/Policy Manager/Frontend,Normal
VLBSFI_GDP_AG,Test,Dark theme on access control list page ,"Description\Verify that Policy Manager Manager respects the UI Style Guides when changing to the dark theme, on access control list page.\ \IVV Techniques\Traceability\ \STD Reference\[GDP-STD-1867]DARK THEME ON ACCESS CONTROL LIST PAGE \ \Preconditions\UI Style Guides document must be available at https://www.figma.com/file/5XvJq10aLsPjfcvFjv9Wl1/GDP-Elements?node-id=0%3A1\More than one ACL exist.\ \Procedure\1. Navigate to the GDP Policy  Manager URL.\2. Click on menu icon.\3. Click on Access control List page \4. Click on theme icon of the header.\5. Open the browser Developer Tools.\6. Inspect the background of the UI page.\7. Inspect the header element.\8. Inspect the search element.\9. Inspectall the cards  of the Access control list.\10. Expand a card.\11. Inspect all elements of the card.\12. Inspect the footer element.\ \Expected Result\1. Policy Manager application is loaded successfully. A list of all policy sets is displayed on main panel.\2. List of pages is shown\3. The ACL page is opened and shows the list of existing ACLs, sorted by name in ascending order “A to Z”. All the cards are collapsed.\4. The theme is changed to the dark theme.\5. Browser Developer Tools is opened.\6. Verify on the Developer Tools that the colour of the background is the same as that specified in the UI Style Guides document.\7. Verify on the Developer Tools which colours are shown for the background and title of the header element. These should be the same as those described in the UI Style Guides document.\8. Verify on the Developer Tools which colours are shown for the input of the search element. These must be the same as those described in the UI Style Guides document.\9. Verify on the Developer Tools which colours are shown for the background and labels of the cards. These must be the same as those described in the UI Style Guides document.\10. The card is expanded with ACL information. It must contain the following fields: name, description, number of objects and a grid.\11. Verify on the Developer Tools which colours are shown for all elements of the ACL information . These must be the same as those described in the UI Style Guides document.\12. Verify on the Developer Tools which colours are shown for the background and labels of the footer element. These should be the same as those described in the UI Style Guides document.\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,frontend",/Policy Manager/Frontend,Normal
VLBSFI_GDP_AG,Test,List secure entities of an application registered on gdp registry via API,"Description\Verify that Policy Manager lists the secure entities of an application via its API.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1868] - LIST SECURE ENTITIES OF AN APPLICATION REGISTERED ON GDP REGISTRY VIA API\ \Preconditions\Logged-in user must have permissions to access application.\At least one application with secure entities must be registered on GDP Registry.\ \Procedure\1. Execute a GET request to the Policy Manager's API, path  /policy-sets/{namespace}/{appName}/secure-entities - using a registered application\ \Expected Result\1. A list with all existing secure entities for that application is returned in JSON format.  A 200 HTTP code is also returned.\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,Critical
VLBSFI_GDP_AG,Test,List secure entities of an application registered on gdp registry when the application is down via API,"Description\Verify that when the application is down, the secure entities are not retrieved.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1869] - LIST SECURE ENTITIES OF AN APPLICATION REGISTERED ON GDP REGISTRY WHEN THE APPLICATION IS DOWN VIA API\ \Preconditions\Logged-in user must have permissions to access application.\At least one application with secure entities must be registered on GDP Registry.\ \Procedure\1. Execute a GET request to the Policy Manager's API, path /policy-sets/{namespace}/{appName}/secure-entities. - for a registered application that is down\ \Expected Result\1. Verify that an error message is returned along with a 404 HTTP code.\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,Critical
VLBSFI_GDP_AG,Test,List secure entites is not allowed for unregistered applications in the gdp registry via API,"Description\Verify that policy manager does not list secure entities of unregistered applications. \ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1870] - LIST SECURE ENTITES IS NOT ALLOWED FOR UNREGISTERED APPLICATIONS IN THE GDP REGISTRY VIA API\ \Preconditions\Logged-in user must have permissions to access application.\At least one application  registered in the Policy Manager BD but unregistered in the GDP REgistry exists.\At least one unregistered application in both Policy Manager BD and GDP Registry exists. \ \Procedure\1. Execute a GET request to the Policy Manager's API, path  /policy-sets/{namespace}/{appName}/secure-entities - for an unregistered application in both Policy Manager and GDP Registry \ \Expected Result\1. Verify that an error message is returned along with a 404 HTTP code.\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,Critical
VLBSFI_GDP_AG,Test,List secure entities of an application when gdp registry is down via API,"Description\Verify that the Policy Manager lists the secure entities of an application when GDP Registry is down.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1871] - LIST SECURE ENTITIES OF AN APPLICATION WHEN GDP REGISTRY IS DOWN VIA API\ \Preconditions\Logged-in user must have permissions to access application.\At least one application must be registered on GDP Registry.\ \Procedure\1. Execute a GET request to the Policy Manager's API, path  /policy-sets/{namespace}/{appName}/secure-entities - using a registered application\ \Expected Result\1. A list with all existing secure entities for that application is returned in JSON format.  A 200 HTTP code is also returned.\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,Critical
VLBSFI_GDP_AG,Test,Policy Manager limits user requests (rate limiting) ,"Description\Verify if the Policy Manager implements a mechanism to limit API requests\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Performance Testing\Traceability\ \STD Reference\[GDP-STD-1872]POLICY MANAGER LIMITS USER REQUESTS (RATE LIMITING) \ \Preconditions\Logged-in user must have permissions to access application.\ \Procedure\Given The ""RateLimit Limit"" set to ""10"" requests (*see Notes)\And The ""RateLimit Refresh Interval"" set to ""30"" seconds (*see Notes)\And The Policy Manager Spa opened for ""gdpadmin""\When The user clicks the Policy Set List refresh Icon\And The user wait 30 seconds\ \Expected Result\Then an error occurs\And a 429 HTTP code is returned (using DevTools).\ \Notes\Setting Rate Limiting Vars: cf set-env polmgr GDP_RATELIMIT_LIMIT 10 && cf set-env polmgr GDP_RATELIMIT_REFRESHINTERVAL 30 && cf restage polmgr",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,frontend,safety,cyber",/Policy Manager/Safety,Critical
VLBSFI_GDP_AG,Test,Policy Manager internationalization,"Description\Verify that the Policy Manager supports internationalization.\ \IVV Techniques\Functional/Black-box testing\Traceability\ \STD Reference\[GDP-STD-1873] - POLICY MANAGER INTERNATIONALIZATION\ \Preconditions\Logged-in user must have permissions to access application.\ \Procedure\Given The Policy Manager SPA opened\When The user clicks the internationalization icon\And The user selects ""English - US""\And The user selects ""Italian - IT""\And The user selects ""Portuguese - PT""\And The user selects ""French - FR""\And The user selects ""Arabic - QA""\ \Expected Result\Then A dropdwon list containing the available languages is displayed\And The labels and titles are translated to ""English - US""\And The labels and titles are translated to ""Italian - IT""\And The labels and titles are translated to ""Portuguese - PT""\And The labels and titles are translated to ""French - FR""\And The labels and titles are translated to ""Arabic - QA""\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,frontend",/Policy Manager/Frontend,Critical
VLBSFI_GDP_AG,Test,Get app version (API),"Description\Verify that Policy Manager is integrated with Monitoring Service.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1874]GET APP VERSION (API)\ \Preconditions\Logged-in user must have permissions to access application.\ \Procedure\GIVEN the Policy Manager is running\AND A valid OAuth2.0 token\WHEN the User executes a GET request to ""/actuator/info"" \ \Expected Result\THEN A ""200"" Http code is returned
And The application's version is returned\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend",/Policy Manager/Backend,Critical
VLBSFI_GDP_AG,Test,Get monitoring information (API),"Description\Verify that Policy Manager is integrated with Monitoring Service.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1875] - GET MONITORING INFORMATION (API)\ \Preconditions\Logged-in user must have permissions to access application.\ \Procedure\GIVEN the Policy Manager is running\And Valid Basic Auth credentials for the application\WHEN the User executes a GET request to ""/actuator/prometheus"" \ \Expected Result\THEN A ""200"" Http code is returned\And The application data is returned\ \Notes\Basic Auth is required to execute this test. To get credentials type 'cf env polmgr-sp' and get vars 'SECURITY_MONITORING_PASSWORD' and 'SECURITY_MONITORING_USER' ",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend,safety,cyber",/Policy Manager/Safety,Critical
VLBSFI_GDP_AG,Test,Monitoring information in GDP Grafana,"Description\Verify that the Monitoring information provided by the Policy Manager is published in GDP Grafana.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1876] - MONITORING INFORMATION IN GDP GRAFANA\ \Preconditions\\ \Procedure\Given The Grafana Opened (https://grafana.cf.gdp.pt.thales)\And The user ""admin"" with password ""gh2r2e7ipf5nzx7lmmqm"" logged in\When The user Selects the ""GDP Apps (Micrometer)"" dashboard\And The User selects the application ""https://polmgr-sp.qa.cf.gdp.pt.thales""\ \Expected Result\Then The ""GDP Apps (Micrometer)"" dashboard is displayed\	And The application info is dispyed\	And The application info is updated over time\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,frontend,safety,cyber",/Policy Manager/Safety,Critical
VLBSFI_GDP_AG,Test,Policy Manager monitoring service alerting rules,"Description\Verify that the Policy Manager allows the user to configure alerting rules in the Monitoring Service\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1877] - POLICY MANAGER MONITORING SERVICE ALERTING RULES\ \Preconditions\\ \Procedure\Given The alerting rules configured for Security Manager (*see Notes)\And Prometheus Application opened (url ""https://prometheus.cf.gdp.pt.thales"", user ""admin"", password ""uikjara27xfaxykzlifj"")\And The ""Alerts"" tab selected\When The user exceeds the number of GET requests to ""https://polmgr-sp.qa.cf.gdp.pt.thales/policy-sets"" (using Postman)\ \Expected Result\Then The Policy Manager rule becomes ""Red"" when the maximum number of API requests is exceeded\ \Notes\To see alerting rules in prometheus:\1. Using Putty open an ""ssh"" connection to ""10.199.4.3"", port ""22"" (login as: ""thplab"", password ""PDat1HQz"")\2. Go to ""/home/thplab/workspace/bosh-deployments/prometheus/prometheus-boshrelease/manifests"" using vim\3. Open the ./prometheus.yml file (use vim)\ \To configure and deploy new alerting rules in prometheus:\1. Using Putty open an ""ssh"" connection to ""10.199.4.3"", port ""22"" (login as: ""thplab"", password ""PDat1HQz"")\2. Go to ""/home/thplab/workspace/bosh-deployments/prometheus/prometheus-boshrelease/manifests"" using vim\3. Open the ./prometheus.yml file (use vim)\4. Edit and Save updated rules\5. Login in bosh ""source ~/bash_login""\6. Go to ""/home/thplab/workspace/bosh-deployments/prometheus/deploy.sh "" to deploy the new alerting rules",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,frontend,safety,cyber",/Policy Manager/Safety,Critical
VLBSFI_GDP_AG,Test,Invalid user cannot get monitoring information (API),"Description\Verify that only allowed users have access to the Monitoring Service.\ \IVV Techniques\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1878] - INVALID USER CANNOT GET MONITORING INFORMATION (API)\ \Preconditions\\ \Procedure\GIVEN the Policy Manager is running\And Invalid Basic Auth credentials for the application\WHEN the User executes a GET request to ""/actuator/prometheus""\ \Expected Result\THEN the user receives the ""401"" Http code\And a json with error message.\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend,safety,cyber",/Policy Manager/Safety,Critical
VLBSFI_GDP_AG,Test,Input validation via API - policy-set boundary values analysis,"Description\Verify that there is input validation for each field\ \IVV Techniques\Boundary Value Analysis\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1879] - INPUT VALIDATION VIA API - POLICY-SET BOUNDARY VALUES ANALYSIS\ \Preconditions\\ \Procedure\Given The ""Policy Manager Input Specification"" (*see Notes)\When In the test data, the user sets a field to its min/max value\And A POST request to ""/policy-sets"" is made\ \Expected Result\Then The returned HTTP code matches the expected result\ \Notes\To see Policy Manager Input Specification: https://wiki.corp.thales/display/GTSSE/%5BGDP-POLMGR%5D+REST+API+Contracts",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend,safety,cyber",/Policy Manager/Safety,Critical
VLBSFI_GDP_AG,Test,Input validation via API - acl boundary values analysis,"Description\Verify that there is input validation for each field\ \IVV Techniques\Boundary Value Analysis\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1880]INPUT VALIDATION VIA API - ACL BOUNDARY VALUES ANALYSIS\ \Preconditions\\ \Procedure\Given The ""Policy Manager Input Specification"" (*see Notes)\When In the test data, the user sets a field to its min/max value\And A POST request to ""/access-control-lists"" is made\ \Expected Result\Then The returned HTTP code matches the expected result\ \Notes\To see Policy Manager Input Specification: https://wiki.corp.thales/display/GTSSE/%5BGDP-POLMGR%5D+REST+API+Contracts",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend,safety,cyber",/Policy Manager/Safety,Critical
VLBSFI_GDP_AG,Test,Input validation via API - policy-set overflow/underflow/xss validation,"Description\Verify that there is input validation for each field\ \IVV Techniques\Boundary Value Analysis\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1881] - INPUT VALIDATION VIA API - POLICY-SET OVERFLOW/UNDERFLOW/XSS VALIDATION\ \Preconditions\\ \Procedure\Given The ""Policy Manager Input Specification"" (*see Notes)\When In the test data, the user sets a field to min-1/max+1/html value\And A POST request to ""/policy-sets"" is made\ \Expected Result\Then The returned HTTP Error code matches the expected result\ \Notes\To see Policy Manager Input Specification: https://wiki.corp.thales/display/GTSSE/%5BGDP-POLMGR%5D+REST+API+Contracts",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend,safety,cyber",/Policy Manager/Safety,Critical
VLBSFI_GDP_AG,Test,Input validation via API - acl overflow/underflow/xss validation,"Description\Verify that there is input validation for each field\ \IVV Techniques\Boundary Value Analysis\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1882] - INPUT VALIDATION VIA API - ACL OVERFLOW/UNDERFLOW/XSS VALIDATION\ \Preconditions\\ \Procedure\Given The ""Policy Manager Input Specification"" (*see Notes)\When In the test data, the user sets a field to min-1/max+1/html value\And A POST request to ""/access-control-lists"" is made\ \Expected Result\Then The returned HTTP Error code matches the expected result\ \Notes\To see Policy Manager Input Specification: https://wiki.corp.thales/display/GTSSE/%5BGDP-POLMGR%5D+REST+API+Contracts",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,backend,safety,cyber",/Policy Manager/Safety,Critical
VLBSFI_GDP_AG,Test,Input validation - policy-set boundary values analysis validation,"Description\Verify that there is input validation for each field\ \IVV Techniques\Boundary Value Analysis\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1883] - INPUT VALIDATION - POLICY-SET BOUNDARY VALUES ANALYSIS VALIDATION\ \Preconditions\\ \Procedure\Given The ""Policy Manager Input Specification"" (*see Notes)\And The Policy Manager Application opened, user ""gdpadmin"" (password ""gdpadmin"")\And The ""Policy-set"" Page selected
 And The ""New Policy"" window opened\When The user sets a field to its min/max value\And The user clicks ""OK""\ \Expected Result\Then The returned HTTP code matches the expected result (devTools)\ \Notes\To see Policy Manager Input Specification: https://wiki.corp.thales/display/GTSSE/%5BGDP-POLMGR%5D+REST+API+Contracts",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,frontend,safety,cyber",/Policy Manager/Safety,Critical
VLBSFI_GDP_AG,Test,Input validation - acl boundary values analysis,"Description\Verify that there is input validation for each field\ \IVV Techniques\Boundary Value Analysis\Functional/Black-box testing\Interface Testing\Traceability\ \STD Reference\[GDP-STD-1884] - INPUT VALIDATION - ACL BOUNDARY VALUES ANALYSIS\ \Preconditions\\ \Procedure\Given The ""Policy Manager Input Specification"" (*see Notes)\And The Policy Manager Application opened, user ""gdpadmin"" (password ""gdpadmin"")\And The ""Access Control List"" Page selected\And The ""Import ACL"" window opened\When The user sets a field to its min/max value\And The user clicks ""IMPORT ACL""\ \Expected Result\Then The returned HTTP code matches the expected result (devTools)\ \Notes\To see Policy Manager Input Specification: https://wiki.corp.thales/display/GTSSE/%5BGDP-POLMGR%5D+REST+API+Contracts",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,frontend,safety,cyber",/Policy Manager/Safety,Critical
VLBSFI_GDP_AG,Test,Input validation - policy-set overflow/underflow/xss validation,"Description\Verify that there is input validation for each field\ \IVV Techniques\Boundary Value Analysis\Functional/Black-box testing\Traceability\ \STD Reference\[GDP-STD-1885] - INPUT VALIDATION - POLICY-SET OVERFLOW/UNDERFLOW/XSS VALIDATION\ \Preconditions\\ \Procedure\Given The ""Policy Manager Input Specification"" (*see Notes)\And The Policy Manager Application opened, user ""gdpadmin"" (password ""gdpadmin"")\And The ""Policy-set"" Page selected\And The ""New Policy"" window opened\When The user sets a field to min-1/max+1/html value\And The user clicks ""OK""\ \Expected Result\Then The returned HTTP Error code matches the expected result (devTools)\ \Notes\To see Policy Manager Input Specification: https://wiki.corp.thales/display/GTSSE/%5BGDP-POLMGR%5D+REST+API+Contracts",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,frontend,safety,cyber",/Policy Manager/Safety,Critical
VLBSFI_GDP_AG,Test,Input validation - acl overflow/underflow/xss validation,"Description\Verify that there is input validation for each field\ \IVV Techniques\Boundary Value Analysis\Functional/Black-box testing\Traceability\ \STD Reference\[GDP-STD-1886] - INPUT VALIDATION - ACL OVERFLOW/UNDERFLOW/XSS VALIDATION\ \Preconditions\\ \Procedure\Given The ""Policy Manager Input Specification"" (*see Notes)\And The Policy Manager Application opened, user ""gdpadmin"" (password ""gdpadmin"")\And The ""Access Control List"" Page selected\And The ""Import ACL"" window opened\When The user sets a field to min-1/max+1/html value\And The user clicks ""IMPORT ACL""\ \Expected Result\Then The returned HTTP Error code matches the expected result (devTools)\ \Notes\To see Policy Manager Input Specification: https://wiki.corp.thales/display/GTSSE/%5BGDP-POLMGR%5D+REST+API+Contracts",Policy Manager,1.3.0,"TEAM-IV,GDP,manual,frontend,safety,cyber",/Policy Manager/Safety,Critical
VLBSFI_GDP_AG,Test,Open Policy Manager in Central Administration Dashboard,"Description\Verify if the Policy Manager main page can be opened from the Central Administration Dashboard.\ \IVV Techniques\Functional/Black-box testing\Traceability\ \STD Reference\[GDP-STD-1887] - OPEN POLICY MANAGER IN CENTRAL ADMINISTRATION DASHBOARD\ \Preconditions\\ \Procedure\Given The user navigates to ""Central Administration Dashboard""\And The user ""gdpadmin"" with password ""gdpadmin"" logs in\And The Central Administration Dashboard is opened displaying all apps\When User clicks the ""Policy Manager"" component\ \Expected Result\Then The Policy Manager is opened\And The ""Policy Manager"" appears on the header\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,automatic,frontend",/Policy Manager/Frontend,High
VLBSFI_GDP_AG,Test,Initial Content in Policy Manager,"Description\Navigate to Policy Manager.\ \IVV Techniques\Functional/Black-box testing\Traceability\ \STD Reference\[GDP-STD-1888] - INITIAL CONTENT IN POLICY MANAGER\ \Preconditions\\ \Procedure\Given The user navigates to ""Policy Manager""\When The user ""gdpadmin"" with password ""gdpadmin"" logs in\ \Expected Result\Then The Policy Manager is opened\And The ""Policy Manager"" appears on the header\ \Notes\",Policy Manager,1.3.0,"TEAM-IV,GDP,automatic,frontend",/Policy Manager/Frontend,High
